# handlers.py
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç 14 –∏—é–Ω—è

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from google_sheets import get_available_slots, book_slot, cancel_booking, get_user_bookings, get_todays_records, get_discount_status, get_total_visits, get_admin_stats, add_free_client, get_all_clients, update_setting, get_settings
from config import ADMIN_CHAT_ID

router = Router()

# FSM –¥–ª—è –æ—Ç–º–µ–Ω—ã
class CancelState(StatesGroup):
    waiting_confirmation = State()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
def main_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –º–∞—Å—Ç–µ—Ä–µ")]
    ], resize_keyboard=True)

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def admin_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìä –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="üí∞ –ò—Ç–æ–≥–∏ –¥–Ω—è")],
        [KeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")],
        [KeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    if str(message.from_user.id) == str(ADMIN_CHAT_ID):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=admin_keyboard())
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä üíÖ

"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:
"
            "üóì –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
"
            "‚è∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
"
            "üìç —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Ü–µ–Ω—ã

"
            "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=main_keyboard()
        )

# –ó–∞–ø–∏—Å—å
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def choose_date(message: Message, state: FSMContext):
    slots = get_available_slots()
    if not slots:
        await message.answer("–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –º–µ—Å—Ç –Ω–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —Ö–æ—á—É", callback_data="waitlist_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ", callback_data="waitlist_no")]
        ]))
        return
    text = "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:

"
    for date, times in slots.items():
        text += f"<b>{date}</b>:
" + ", ".join(times) + "

"
    await message.answer(text, parse_mode="HTML")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
@router.message(F.text == "üóì –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def view_bookings(message: Message, state: FSMContext):
    bookings = get_user_bookings(message.from_user.id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    text = "üìå –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:

"
    for b in bookings:
        text += f"{b['date']} –≤ {b['time']} ‚Äî {b['service']} ({b['price']} –ª–µ–π)
"
    visits = get_total_visits(message.from_user.id)
    to_discount = 6 - (visits % 6)
    if to_discount == 1:
        text += "
üéâ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 10%!"
    else:
        text += f"
üí° –£ –≤–∞—Å —É–∂–µ {visits % 6} –ø—Ä–æ—Ü–µ–¥—É—Ä ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {to_discount} –¥–æ —Å–∫–∏–¥–∫–∏ 10%!"
    await message.answer(text)

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_booking_start(message: Message, state: FSMContext):
    bookings = get_user_bookings(message.from_user.id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    b = bookings[-1]
    await state.set_state(CancelState.waiting_confirmation)
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:
üìÖ {b['date']} –≤ {b['time']}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_yes")],
            [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="reschedule")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cancel_no")]
        ])
    )

@router.callback_query(CancelState.waiting_confirmation, F.data == "cancel_yes")
async def confirm_cancel(call: CallbackQuery, state: FSMContext):
    cancel_booking(call.from_user.id)
    await call.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(CancelState.waiting_confirmation, F.data == "reschedule")
async def reschedule(call: CallbackQuery, state: FSMContext):
    cancel_booking(call.from_user.id)
    await call.message.edit_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º—Å—è!")
    await state.clear()
    await choose_date(call.message, state)

@router.callback_query(CancelState.waiting_confirmation, F.data == "cancel_no")
async def cancel_back(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# –û –º–∞—Å—Ç–µ—Ä–µ
@router.message(F.text == "‚ÑπÔ∏è –û –º–∞—Å—Ç–µ—Ä–µ")
async def about_master(message: Message, state: FSMContext):
    settings = get_settings()
    text = f"üìç –ê–¥—Ä–µ—Å: {settings['address']}

üíÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å ‚Äî –º–∞—Å—Ç–µ—Ä –ï–≤–≥–µ–Ω–∏—è:

"
    text += (
        "üíé –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π ‚Äî 280 –ª–µ–π
"
        "üíé –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–æ–≥—Ç–µ–π ‚Äî 240 –ª–µ–π
"
        "üíÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º ‚Äî 210 –ª–µ–π
"
        "ü¶∂ –ü–µ–¥–∏–∫—é—Ä ‚Äî 250 –ª–µ–π
"
        "ü¶∂ –ü–µ–¥–∏–∫—é—Ä + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—è—Ç–æ—á–µ–∫ ‚Äî 320 –ª–µ–π

"
        "üéÅ –ö–∞–∂–¥–∞—è 6-—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π 10% –ø–æ —Å–∏—Å—Ç–µ–º–µ 5+1"
    )
    await message.answer(text)

# –ê–¥–º–∏–Ω
@router.message(F.text == "/admin")
async def admin_panel(message: Message, state: FSMContext):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏, –∏—Ç–æ–≥–∏, —Ä–∞—Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç.–ø.)
# –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –Ω–∏–∂–µ ‚Äî –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏