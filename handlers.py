
# ‚úÖ handlers.py v2 ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
# –í–∫–ª—é—á–∞–µ—Ç:
# - FSM –∑–∞–ø–∏—Å—å + —Å–∫–∏–¥–∫–∞ 5+1
# - "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏" + —Å—á—ë—Ç—á–∏–∫
# - "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏" + –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
# - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏—Ç–æ–≥–∏
# - üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ üì∏ —Ñ–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞
# - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥—Ä–µ—Å, –ø—Ä–∞–π—Å, –≥—Ä–∞—Ñ–∏–∫) —á–µ—Ä–µ–∑ FSM
# üîí –í—Å—ë –ø–æ —ç—Ç–∞–ª–æ–Ω—É, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ —Å–æ–±—Ä–∞–Ω–æ –ø–æ–¥ –∫–ª—é—á

# === ‚ùå –û—Ç–º–µ–Ω–∞ –∏ üîÅ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å ===
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_or_reschedule(message: types.Message, state: FSMContext):
    sheet = get_worksheet("–ó–∞–ø–∏—Å–∏")
    all_data = sheet.get_all_records()
    user_records = [r for r in all_data if str(r["Telegram ID"]) == str(message.from_user.id) and r["–û—Ç–º–µ–Ω–∞"].lower() != "–¥–∞"]

    if not user_records:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    last = user_records[-1]
    await state.update_data(cancel_date=last["–î–∞—Ç–∞"], cancel_time=last["–í—Ä–µ–º—è"])
    markup = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å")], [types.KeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")]],
        resize_keyboard=True
    )
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å:
üìÖ {last['–î–∞—Ç–∞']} –≤ {last['–í—Ä–µ–º—è']} ‚Äî {last['–£—Å–ª—É–≥–∞']}?
",
        reply_markup=markup
    )

@router.message(F.text == "‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å")
async def confirm_cancel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sheet = get_worksheet("–ó–∞–ø–∏—Å–∏")
    values = sheet.get_all_values()
    for i, row in enumerate(values):
        if row[0] == str(message.from_user.id) and row[6] == data["cancel_date"] and row[7] == data["cancel_time"]:
            sheet.update_cell(i+1, 12, "–¥–∞")  # –∫–æ–ª–æ–Ω–∫–∞ "–û—Ç–º–µ–Ω–∞"
            graf = get_worksheet("–ì—Ä–∞—Ñ–∏–∫")
            graf_values = graf.get_all_values()
            for j, g in enumerate(graf_values):
                if g[0] == data["cancel_date"] and g[1] == data["cancel_time"]:
                    graf.update_cell(j+1, 3, "—Å–≤–æ–±–æ–¥–Ω–æ")
                    break
            break
    await message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=client_menu())
    await state.clear()

@router.message(F.text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def reschedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await confirm_cancel(message, state)
    await start_booking(message, state)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å FSM

# === üì∏ –§–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ ===
@router.message(F.photo, F.chat.id == ADMIN_CHAT_ID)
async def receive_photo(message: types.Message, state: FSMContext):
    await state.set_state(BookingFSM.photo_caption)
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏:")

@router.message(BookingFSM.photo_caption)
async def send_photo_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get("photo_id")
    caption = message.text

    users = set()
    sheet = get_worksheet("–ö–ª–∏–µ–Ω—Ç—ã")
    for row in sheet.get_all_records():
        users.add(int(row["Telegram ID"]))

    for uid in users:
        try:
            await message.bot.send_photo(uid, photo=photo_id, caption=caption, reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/ManiCloudBot")]]
            ))
        except:
            continue

    await message.answer("üì∏ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
    await state.clear()

# === ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ FSM, –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ===
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Äî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
‚Äî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞
‚Äî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")

# === FSM –¥–ª—è ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
class SettingsFSM(StatesGroup):
    choosing = State()
    new_address = State()
    edit_price_service = State()
    edit_price_value = State()
    set_work_days = State()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")],
            [types.KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å")],
            [types.KeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await state.set_state(SettingsFSM.choosing)
    await message.answer("‚öôÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

@router.message(SettingsFSM.choosing, F.text == "üè† –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def change_address(message: types.Message, state: FSMContext):
    await state.set_state(SettingsFSM.new_address)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")

@router.message(SettingsFSM.new_address)
async def save_new_address(message: types.Message, state: FSMContext):
    settings = get_worksheet("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    settings.update("B2", message.text)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=admin_menu())
    await state.clear()

@router.message(SettingsFSM.choosing, F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å")
async def start_price_edit(message: types.Message, state: FSMContext):
    services = get_services()
    markup = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=service)] for service in services],
        resize_keyboard=True
    )
    await state.set_state(SettingsFSM.edit_price_service)
    await message.answer("üíÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=markup)

@router.message(SettingsFSM.edit_price_service)
async def ask_new_price(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    await state.set_state(SettingsFSM.edit_price_value)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@router.message(SettingsFSM.edit_price_value)
async def save_new_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        data = await state.get_data()
        service = data.get("service")
        sheet = get_worksheet("–£—Å–ª—É–≥–∏")
        rows = sheet.get_all_values()
        for i, row in enumerate(rows):
            if row[0] == service:
                sheet.update_cell(i + 1, 2, price)
                await message.answer(f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è ¬´{service}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {price} –ª–µ–π.", reply_markup=admin_menu())
                await state.clear()
                return
        await message.answer("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_menu())
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(SettingsFSM.choosing, F.text == "üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
async def edit_schedule_note(message: types.Message, state: FSMContext):
    await message.answer("üóì –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä—É—á–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—Å—Ç–µ ¬´–ì—Ä–∞—Ñ–∏–∫¬ª Google –¢–∞–±–ª–∏—Ü—ã.
"
                         "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç—ã –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    await state.clear()

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_admin(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

# === FSM: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ===
class FreeClientFSM(StatesGroup):
    name = State()
    surname = State()
    visits = State()

@router.message(F.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
async def add_free_client_start(message: types.Message, state: FSMContext):
    await state.set_state(FreeClientFSM.name)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

@router.message(FreeClientFSM.name)
async def get_free_surname(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(FreeClientFSM.surname)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞:")

@router.message(FreeClientFSM.surname)
async def get_free_visits(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(FreeClientFSM.visits)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π:")

@router.message(FreeClientFSM.visits)
async def save_free_client(message: types.Message, state: FSMContext):
    try:
        visits = int(message.text)
        data = await state.get_data()
        sheet = get_worksheet("–ö–ª–∏–µ–Ω—Ç—ã")
        sheet.append_row([
            str(message.from_user.id),
            data["name"],
            data["surname"],
            "-",  # —Ç–µ–ª–µ—Ñ–æ–Ω
            visits,
            "-",
            "–¥–∞"
        ])
        await message.answer(f"üéÅ –ö–ª–∏–µ–Ω—Ç {data['name']} {data['surname']} –¥–æ–±–∞–≤–ª–µ–Ω —Å {visits} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏.",
                             reply_markup=admin_menu())
        await state.clear()
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π.")

# === üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç ===
@router.message(F.text == "üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def show_price_list(message: types.Message):
    services = get_services()
    text = "üíÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å:

"
    for name, price in services.items():
        emoji = "üíé" if "–Ω–∞—Ä–∞—â" in name.lower() or "–∫–æ—Ä—Ä–µ–∫" in name.lower() else "ü¶∂" if "–ø–µ–¥–∏–∫—é—Ä" in name.lower() else "üíÖ"
        text += f"{emoji} {name} ‚Äî {price} –ª–µ–π
"
    text += "
üéÅ –ö–∞–∂–¥–∞—è 6-—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π 10%"
    await message.answer(text)
